<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>庸人妄语</title>
    <link>https://mandydragon.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Tue, 28 Nov 2017 03:44:01 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>git拉取远程分支到本地</title>
      <link>https://mandydragon.github.io/2017/11/28/%E6%9D%82%E8%B0%88/git%E6%8B%89%E5%8F%96%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E5%88%B0%E6%9C%AC%E5%9C%B0/</link>
      <guid>https://mandydragon.github.io/2017/11/28/%E6%9D%82%E8%B0%88/git%E6%8B%89%E5%8F%96%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E5%88%B0%E6%9C%AC%E5%9C%B0/</guid>
      <pubDate>Tue, 28 Nov 2017 03:29:52 GMT</pubDate>
      <description>
      
        
        
          &lt;ul&gt;
&lt;li&gt;新建本地分支&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td 
        
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>新建本地分支</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b localName</span><br></pre></td></tr></table></figure><p>pull远程代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin remoteName</span><br></pre></td></tr></table></figure><ul><li>fetch</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin branchname:branchname</span><br></pre></td></tr></table></figure><ul><li>获取远程分支remoteName 到本地新分支localName，并跳到localName分支</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout origin/remoteName -b localName</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://mandydragon.github.io/2017/11/28/%E6%9D%82%E8%B0%88/git%E6%8B%89%E5%8F%96%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E5%88%B0%E6%9C%AC%E5%9C%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>nginx 403 Forbidden</title>
      <link>https://mandydragon.github.io/2017/11/27/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/nginx-403-Forbidden/</link>
      <guid>https://mandydragon.github.io/2017/11/27/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/nginx-403-Forbidden/</guid>
      <pubDate>Mon, 27 Nov 2017 09:46:38 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;a href=&quot;http://xrong.net/2015/09/14/nginx%20403%20Forbidden/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nginx 403 Forbidden&lt;/a&gt;&lt;/p&gt;

        
      
      </description>
      
      <content:encoded><![CDATA[<p><a href="http://xrong.net/2015/09/14/nginx%20403%20Forbidden/" target="_blank" rel="noopener">nginx 403 Forbidden</a></p>]]></content:encoded>
      
      <comments>https://mandydragon.github.io/2017/11/27/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/nginx-403-Forbidden/#disqus_thread</comments>
    </item>
    
    <item>
      <title>lnmp访问速度变慢排查方法</title>
      <link>https://mandydragon.github.io/2017/11/27/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/lnmp%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6%E5%8F%98%E6%85%A2%E6%8E%92%E6%9F%A5%E6%96%B9%E6%B3%95/</link>
      <guid>https://mandydragon.github.io/2017/11/27/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/lnmp%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6%E5%8F%98%E6%85%A2%E6%8E%92%E6%9F%A5%E6%96%B9%E6%B3%95/</guid>
      <pubDate>Mon, 27 Nov 2017 09:42:14 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;a href=&quot;http://xrong.net/2016/02/16/lnmp%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6%E5%8F%98%E6%85%A2%E6%8E%92%E6%9F%A5%E6%96%B9%E6%B3%95/&quot; tar
        
      
      </description>
      
      <content:encoded><![CDATA[<p><a href="http://xrong.net/2016/02/16/lnmp%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6%E5%8F%98%E6%85%A2%E6%8E%92%E6%9F%A5%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">lnmp访问速度变慢排查方法</a></p>]]></content:encoded>
      
      <comments>https://mandydragon.github.io/2017/11/27/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/lnmp%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6%E5%8F%98%E6%85%A2%E6%8E%92%E6%9F%A5%E6%96%B9%E6%B3%95/#disqus_thread</comments>
    </item>
    
    <item>
      <title>nginx日志</title>
      <link>https://mandydragon.github.io/2017/11/27/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/nginx%E6%97%A5%E5%BF%97/</link>
      <guid>https://mandydragon.github.io/2017/11/27/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/nginx%E6%97%A5%E5%BF%97/</guid>
      <pubDate>Mon, 27 Nov 2017 08:09:42 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;nginx 日志主要有两条指令：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;log_format：用来设置日志格式；&lt;/li&gt;
&lt;li&gt;access_log：用来指定日志文件的存放路径、格式（把定义的log_format 跟在后面）和缓存大小；如果不想启用日志则access_log off
        
      
      </description>
      
      <content:encoded><![CDATA[<p>nginx 日志主要有两条指令：</p><ol><li>log_format：用来设置日志格式；</li><li>access_log：用来指定日志文件的存放路径、格式（把定义的log_format 跟在后面）和缓存大小；如果不想启用日志则access_log off ;</li></ol><h1 id="log-format-日志格式"><a href="#log-format-日志格式" class="headerlink" title="log_format 日志格式"></a>log_format 日志格式</h1><h2 id="语法格式："><a href="#语法格式：" class="headerlink" title="语法格式："></a>语法格式：</h2><p>该指令用来设置日志记录的格式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log_format name format [format ...]</span><br><span class="line">    name : 给定义的格式起的名称，应该是全局唯一的</span><br></pre></td></tr></table></figure><h2 id="默认日志格式"><a href="#默认日志格式" class="headerlink" title="默认日志格式"></a>默认日志格式</h2><p>默认情况下，nginx的默认日志格式如下(不同版本可能略有不同)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log_format combined &apos;$remote_addr - $remote_user [$time_local]  &apos;</span><br><span class="line">                    &apos;&quot;$request&quot; $status $body_bytes_sent &apos;</span><br><span class="line">                    &apos;&quot;$http_referer&quot; &quot;$http_user_agent&quot;&apos;;</span><br></pre></td></tr></table></figure><p>日志格式举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.161.1 - - [25/Oct/2016:05:39:45 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 404 571 &quot;http://192.168.161.126/&quot; &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36&quot;</span><br></pre></td></tr></table></figure><h2 id="常见内置变量"><a href="#常见内置变量" class="headerlink" title="常见内置变量"></a>常见内置变量</h2><p> <img src="http://p02hu8t9c.bkt.clouddn.com/nginx-log-param.jpg" alt="nginx中log日志变量" align="center"></p><h1 id="日志分类"><a href="#日志分类" class="headerlink" title="日志分类"></a>日志分类</h1><h2 id="access-log"><a href="#access-log" class="headerlink" title="access_log"></a>access_log</h2><p>该指令用来指定访问日志的路径及格式等信息。</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access_log path [log_format_name [buffer=buffer_size | off]]</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log_format reverseRealIpFormat1 &apos;$remote_addr - $remote_user [$time_local]  &apos;</span><br><span class="line">                    &apos;&quot;$request&quot; $status $body_bytes_sent &apos;</span><br><span class="line">                    &apos;&quot;$http_referer&quot; &quot;$http_user_agent&quot;&apos;;</span><br><span class="line">access_log /var/log/nginx/my-access.log reverseRealIpFormat1 buffer=8k;</span><br></pre></td></tr></table></figure><p>在access_log中可以使用变量，但是不能与buffer同时启用,否则buffer不能启用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. access_log /var/log/nginx/$server_name.log reverseRealIpFormat1;</span><br><span class="line">2. access_log /var/log/nginx/$server_name.log reverseRealIpFormat1 buffer=8k;</span><br></pre></td></tr></table></figure><h2 id="error-log"><a href="#error-log" class="headerlink" title="error_log"></a>error_log</h2><p>error_log是设置记录错误日志的指令。</p><p>该指令在 http, stream, server 和 location 段都可以被指定，可以覆盖更外面的段的设置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_log /var/log/nginx/error.log warn;</span><br></pre></td></tr></table></figure><h2 id="open-log-file-cache"><a href="#open-log-file-cache" class="headerlink" title="open_log_file_cache"></a>open_log_file_cache</h2><p>每次记录日志都是将日志文件打开-&gt;写入-&gt;关闭,太消耗IO. </p><p>open_log_file_cache 可以设置路径中含有变量的日志配置中日志文件的文件描述符缓存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">open_log_file_cache max=N [inactive=time] [min_uses=N] [valid=time] | off;</span><br><span class="line"></span><br><span class="line">参数注释如下：</span><br><span class="line"></span><br><span class="line">max:设置缓存中的最大文件描述符数量，如果缓存被占满，采用LRU算法将描述符关闭。</span><br><span class="line">inactive:设置存活时间，默认是10s</span><br><span class="line">min_uses:设置在inactive时间段内，日志文件最少使用多少次后，该日志文件描述符记入缓存中，默认是1次</span><br><span class="line">valid:设置检查频率，默认60s</span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open_log_file_cache max=655350 inactive=20s;</span><br></pre></td></tr></table></figure><h2 id="设置刷盘策略"><a href="#设置刷盘策略" class="headerlink" title="设置刷盘策略"></a>设置刷盘策略</h2><p>buffer 满 32k 才刷盘；假如 buffer 不满 5s 钟强制刷盘</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access_log /data/logs/nginx-access.log buffer=32k flush=5s;</span><br></pre></td></tr></table></figure><h2 id="使用举例"><a href="#使用举例" class="headerlink" title="使用举例"></a>使用举例</h2><p>一般log_format在全局设置，可以设置多个。access_log 可以在全局设置，但往往是定义在虚拟主机（server）中的location中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                   &apos;&quot;$status&quot; $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                   &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &apos;</span><br><span class="line">                   &apos;&quot;$gzip_ratio&quot; $request_time $bytes_sent $request_length&apos;;</span><br><span class="line">    </span><br><span class="line">    log_format srcache_log &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                        &apos;&quot;$status&quot; $body_bytes_sent $request_time $bytes_sent $request_length &apos;</span><br><span class="line">                        &apos;[$upstream_response_time] [$srcache_fetch_status] [$srcache_store_status] [$srcache_expire]&apos;;</span><br><span class="line"> </span><br><span class="line">    open_log_file_cache max=1000 inactive=60s;</span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">        server_name ~^(www\.)?(.+)$;</span><br><span class="line">        access_log logs/$2-access.log main;</span><br><span class="line">        error_log logs/$2-error.log;</span><br><span class="line">        location /srcache &#123;</span><br><span class="line">            access_log logs/access-srcache.log srcache_log;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="日志分析："><a href="#日志分析：" class="headerlink" title="日志分析："></a>日志分析：</h1><p>通过对日志格式的定义，就可以使用常见的 Linux 命令行工具进行分析了：</p><h2 id="查找访问频率最高的-URL-和次数："><a href="#查找访问频率最高的-URL-和次数：" class="headerlink" title="查找访问频率最高的 URL 和次数："></a>查找访问频率最高的 URL 和次数：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access.log | awk -F ‘^A’ ‘&#123;print $10&#125;’ | sort | uniq -c</span><br></pre></td></tr></table></figure><h2 id="查找当前日志文件-500-错误的访问："><a href="#查找当前日志文件-500-错误的访问：" class="headerlink" title="查找当前日志文件 500 错误的访问："></a>查找当前日志文件 500 错误的访问：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access.log | awk -F ‘^A’ ‘&#123;if($5 == 500) print $0&#125;’</span><br></pre></td></tr></table></figure><h2 id="查找当前日志文件-500-错误的数量："><a href="#查找当前日志文件-500-错误的数量：" class="headerlink" title="查找当前日志文件 500 错误的数量："></a>查找当前日志文件 500 错误的数量：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access.log | awk -F ‘^A’ ‘&#123;if($5 == 500) print $0&#125;’ | wc -l</span><br></pre></td></tr></table></figure><h2 id="查找某一分钟内-500-错误访问的数量"><a href="#查找某一分钟内-500-错误访问的数量" class="headerlink" title="查找某一分钟内 500 错误访问的数量:"></a>查找某一分钟内 500 错误访问的数量:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access.log | awk -F ‘^A’ ‘&#123;if($5 == 500) print $0&#125;’ | grep ’09:00’ | wc-l</span><br></pre></td></tr></table></figure><h2 id="查找耗时超过-1s-的慢请求："><a href="#查找耗时超过-1s-的慢请求：" class="headerlink" title="查找耗时超过 1s 的慢请求："></a>查找耗时超过 1s 的慢请求：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f access.log | awk -F ‘^A’ ‘&#123;if($6&gt;1) print $0&#125;’</span><br></pre></td></tr></table></figure><p>假如只想查看某些位：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f access.log | awk -F ‘^A’ ‘&#123;if($6&gt;1) print $3″|”$4&#125;’</span><br></pre></td></tr></table></figure><h2 id="查找-502-错误最多的-URL："><a href="#查找-502-错误最多的-URL：" class="headerlink" title="查找 502 错误最多的 URL："></a>查找 502 错误最多的 URL：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access.log | awk -F ‘^A’ ‘&#123;if($5==502) print $11&#125;’ | sort | uniq -c</span><br></pre></td></tr></table></figure><h2 id="查找-200-空白页"><a href="#查找-200-空白页" class="headerlink" title="查找 200 空白页"></a>查找 200 空白页</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access.log | awk -F ‘^A’ ‘&#123;if($5==200 &amp;&amp; $8 &lt; 100) print $3″|”$4″|”$11″|”$6&#125;’</span><br></pre></td></tr></table></figure><h1 id="切割日志"><a href="#切割日志" class="headerlink" title="切割日志"></a>切割日志</h1><p>Nginx 的日志都是写在一个文件当中的，不会自动地进行切割，如果访问量很大的话，将导致日志文件容量非常大，不便于管理和造成Nginx 日志写入效率低下等问题。所以，往往需要要对access_log、error_log日志进行切割。</p><p>切割日志一般利用USR1信号让nginx产生新的日志。实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">logdir=&quot;/data/logs/nginx&quot;</span><br><span class="line">pid=`cat $logdir/nginx.pid`</span><br><span class="line">DATE=`date -d &quot;1 hours ago&quot; +%Y%m%d%H`</span><br><span class="line">DATE_OLD=`date -d &quot;7 days ago&quot; +%Y%m%d`</span><br><span class="line">for i in `ls $logdir/*access.log`; do</span><br><span class="line">        mv $i $i.$DATE</span><br><span class="line">done</span><br><span class="line">for i in `ls $logdir/*error.log`; do</span><br><span class="line">        mv $i $i.$DATE</span><br><span class="line">done</span><br><span class="line">kill -s USR1 $pid</span><br><span class="line">rm -v $logdir&quot;/access.log.&quot;$DATE_OLD*</span><br><span class="line"></span><br><span class="line">rm -v $logdir&quot;/error.log.&quot;$DATE_OLD*</span><br></pre></td></tr></table></figure><p>1、分析：</p><p>将上面的脚本放到crontab中，每小时执行一次（0 ），这样每小时会把当前日志重命名成一个新文件；然后发送USR1这个信号让Nginx 重新生成一个新的日志。（相当于备份日志）<br>将前7天的日志删除；<br>2、说明：<br>在没有执行kill -USR1 $pid之前，即便已经对文件执行了mv命令而改变了文件名称，nginx还是会向新命名的文件”*access.log.2016032623”照常写入日志数据的。原因在于：linux系统中，内核是根据文件描述符来找文件的。</p><p>3、logrotates：<br>使用系统自带的logrotates，也可以实现nginx的日志分割，查看其bash源码，发现也是发送USR1这个信号。</p><h1 id="使用日志排查问题举例"><a href="#使用日志排查问题举例" class="headerlink" title="使用日志排查问题举例"></a>使用日志排查问题举例</h1><h2 id="磁盘满"><a href="#磁盘满" class="headerlink" title="磁盘满"></a>磁盘满</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>某周日晚8点多，收到报警短信，我们一个pv统计服务的打点统计结果突然大幅减少。赶紧登VPN上内网，发现pv统计曲线，在故障发生后，对比上周日下降到1/3左右。</p><h3 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h3><ol><li>检查了统计计算程序，未发现异常。</li><li><p>检查了一下机器列表<br>发现有一台电信的机器（ds1）挂了，lvs上已经自动下线；另一台电信机器（ds2）CPU空闲率从81%下降到42%</p></li><li><p>先将这些程序 kill掉，并在 联通机房的 ls2 机器上启动起来<br>操作完毕后，ds2的CPU空闲率回升到70%多，但pv统计结果依然维持在1/3左右</p></li><li>查看ds2上的打点日志(nginx的access log)，发现竟然没有新日志写入。再查看nginx的错误日志，有如下字样：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[alert] 19963#0: *17264042335 write() to &quot;/usr/local/nginx/logs/xxx.log&quot; failed (28: No space left on device) while logging request</span><br></pre></td></tr></table></figure><p>再用<a href="http://man.linuxde.net/df" target="_blank" rel="noopener">df</a> -lh命令查看,发现磁盘已满</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Filesystem            Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/xvde1            493G  493G   0G  100% /</span><br><span class="line">tmpfs                 2.0G     0  2.0G   0% /dev/shm</span><br></pre></td></tr></table></figure><p>清理一部分无用日志，重启nginx，再观察，统计结果终于回升了。</p><h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><p>原来电信机房的ds1机器挂了之后，所有电信的流量都到ds2这一台机器上了，导致打点日志增长过快，加上之前有部分无用日志未及时清理，导致硬盘满了，所有电信网络打点请求的日志都没有记录下来。我们电信的请求量大约是联通的两倍，因此反映到统计结果上是下降到1/3。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>这次问题的出现到解决，实际上经历了较长的时间。回过头来思考，其实问题是可以很快定位解决的。观察到日志下降到1/3的现象，就可以怀疑是整个电信的日志没有收集到，查一下电信机器上的打点日志 和 error log，很快可以看到问题。另外，出现程序执行不对劲，日志写入不了等等奇怪问题，都可以看看是否磁盘满了。</p><hr><p>参考博客:</p><ol><li><a href="http://www.jianshu.com/p/4fcaac8f2996" target="_blank" rel="noopener">http://www.jianshu.com/p/4fcaac8f2996</a></li><li><a href="https://lanjingling.github.io/2016/03/14/nginx-access-log/" target="_blank" rel="noopener">https://lanjingling.github.io/2016/03/14/nginx-access-log/</a></li><li><a href="http://tabalt.net/blog/a-nginx-log-problem-investigation-record/" target="_blank" rel="noopener">http://tabalt.net/blog/a-nginx-log-problem-investigation-record/</a></li></ol>]]></content:encoded>
      
      <comments>https://mandydragon.github.io/2017/11/27/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/nginx%E6%97%A5%E5%BF%97/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Nginx 504错误总结</title>
      <link>https://mandydragon.github.io/2017/11/27/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/Nginx%20504%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93/</link>
      <guid>https://mandydragon.github.io/2017/11/27/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/Nginx%20504%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93/</guid>
      <pubDate>Mon, 27 Nov 2017 07:02:28 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;很多人都都可能遇到过 504 Gateway Time-out。有时候会让人一头雾水。&lt;br&gt;解决方法：&lt;br&gt;1.通过百度可以很多人的说法，调整 nginx配置或者PHP-fpm配置，配置大家都可以百度，在这边就不多说。但是很多都尝试了没有什么软用。&lt;br&gt;2.尝试过上面
        
      
      </description>
      
      <content:encoded><![CDATA[<p>很多人都都可能遇到过 504 Gateway Time-out。有时候会让人一头雾水。<br>解决方法：<br>1.通过百度可以很多人的说法，调整 nginx配置或者PHP-fpm配置，配置大家都可以百度，在这边就不多说。但是很多都尝试了没有什么软用。<br>2.尝试过上面的方法还是回到本质上是不是整站都是504.如果不是，我建议你打开php-fpm 慢日志来查看对应的页面请求与响应慢是由哪个方法或者操作造成的。<br>php-fpm 慢日志的配置如下：<br>request_slowlog_timeout = 5 //5秒以上的 当一个请求该设置的超时时间后，就会将对应的PHP调用堆栈信息完整写入到慢日志中 设置为 ‘0’ 表示 ‘Off’<br>slowlog = /var/log/php-fpm.slow.log   //日志目录</p><p>再打开日志方法查看是哪个方法或者操作导致的。直接修改代码。<br>php-fpm 慢日志 不建议在生产环境下使用</p><hr><ol><li><a href="https://my.oschina.net/u/3503791/blog/908623" target="_blank" rel="noopener">https://my.oschina.net/u/3503791/blog/908623</a></li></ol>]]></content:encoded>
      
      <comments>https://mandydragon.github.io/2017/11/27/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/Nginx%20504%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
